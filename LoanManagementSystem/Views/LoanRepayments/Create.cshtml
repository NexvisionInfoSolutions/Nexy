@model Data.Models.Accounts.sdtoLoanRepayment

@{
    ViewBag.Title = "Add Loan Repayment";

}
<link href="~/Content/bootstrap-datepicker.min.css" rel="stylesheet" />
<script src="~/Scripts/bootstrap-datepicker.js"></script>
<script language="javascript" type="text/javascript">

    $(document).ready(function () {
        var datepc = $('.datepicker');
        datepc.datepicker({
            format: 'mm-dd-yyyy',
            //startDate: '-3d',
            //showOn: "both",
            buttonImageOnly: true,
            buttonImage: "calendar.gif",
            buttonText: "Calendar",
            regional: ["en-US"]
        });

        $('#txtRepaymentAmount').keyup(function () {
            var pendingPrincipal = parseFloat($("#hdnPendingPrincipalAmount").val().length == 0 ? 0 : $("#hdnPendingPrincipalAmount").val());
            var repaymentAmount = (parseFloat($('#txtRepaymentAmount').val().length == 0 ? 0 : $('#txtRepaymentAmount').val()) - parseFloat($('#hdnInterestAmount').val().length == 0 ? 0 : $('#hdnInterestAmount').val()));
            var txtRepaymentDate = Date.parse($('#txtRepaymentDate').val());
            var hdnLastRepaymentDate = Date.parse($('#hdnLastRepaymentDate').val());
            var diffDays = (txtRepaymentDate - hdnLastRepaymentDate) / (3600 * 1000 * 24);
            if (diffDays == 0)
                diffDays = 1;
            $('#lblPendingPrincipalAmount').text((pendingPrincipal - repaymentAmount));
        });

        $('#txtRepaymentDate').change(function () {
            var hdnInterestRate = parseFloat($('#hdnInterestRate').val());
            var pendingPrincipal = parseFloat($("#hdnPendingPrincipalAmount").val().length == 0 ? 0 : $("#hdnPendingPrincipalAmount").val());
            //var repaymentAmount = (parseFloat($('#txtRepaymentAmount').val().length == 0 ? 0 : $('#txtRepaymentAmount').val()) - parseFloat($('#hdnInterestAmount').val().length == 0 ? 0 : $('#hdnInterestAmount').val()));
            var txtRepaymentDate = Date.parse($('#txtRepaymentDate').val());
            var hdnLastRepaymentDate = Date.parse($('#hdnLastRepaymentDate').val());
            if(hdnLastRepaymentDate==null)
                hdnLastRepaymentDate = txtRepaymentDate;
            var hdnPreviousPaymentDueAmount = parseFloat($('#hdnPreviousPaymentDueAmount').val());
            var diffDays = (txtRepaymentDate - hdnLastRepaymentDate) / (3600 * 1000 * 24);
            //if (diffDays == 0)
                //diffDays = 1;
            var InterestAmount = (pendingPrincipal * (hdnInterestRate / 100) * diffDays) / 365;
            var InstallmentAmount = @ViewBag.InstallmentAmount;
            var repayAmount = (InstallmentAmount * diffDays) + InterestAmount + hdnPreviousPaymentDueAmount;
            repayAmount = repayAmount.toFixed(2);
            if(repayAmount!=null && !isNaN(repayAmount))
                $('#txtRepaymentAmount').val(repayAmount);
            $('#lblPendingPrincipalAmount').text((pendingPrincipal - repayAmount));
        });
    })

</script>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

    <div class="form-horizontal">
        <hr />
        @Html.ValidationSummary(true, "", new { @class = "text-danger" })
        @Html.HiddenFor(x => x.PendingPrincipalAmount, new { @ID = "hdnPendingPrincipalAmount" })
        @Html.HiddenFor(x => x.InterestAmount, new { @ID = "hdnInterestAmount" })
        @Html.HiddenFor(x => x.Status)
        @Html.HiddenFor(x => x.PrincipalAmount)
        @Html.HiddenFor(x => x.InterestRate, new { @ID = "hdnInterestRate" })
        @Html.HiddenFor(x => x.PendingInstallments)
        @Html.HiddenFor(x => x.RepaymentDate, new { @ID = "hdnLastRepaymentDate" })
        @Html.HiddenFor(x => x.PreviousPaymentDueAmount, new { @ID = "hdnPreviousPaymentDueAmount" })

        <div class="form-group">
            @Html.LabelFor(model => model.LoanId, "LoanId", htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownList("LoanId", (SelectList)ViewBag.LoanList, htmlAttributes: new { @ID = "ddlLoan", onchange = "document.location.href = '/LoanRepayments/Create?LoanId=' + this.options[this.selectedIndex].value;" })
                @Html.ValidationMessageFor(model => model.LoanId, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RepaymentCode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DisplayFor(model => model.RepaymentCode, new { htmlAttributes = new { } })
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.RepaymentDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextBoxFor(model => model.RepaymentDate, new { @id = "txtRepaymentDate", @class = "datepicker datefield", placeholder = "Enter Repayment date here..." })
                @Html.ValidationMessageFor(model => model.RepaymentDate)
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PrincipalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.LabelFor(x => x.PrincipalAmount, @Model.PrincipalAmount.ToString("N"))
                @*@Html.ValidationMessageFor(model => model.PrincipalAmount, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InterestAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.LabelFor(x => x.InterestAmount, @Model.InterestAmount.ToString("N"))
                @*@Html.ValidationMessageFor(model => model.InterestAmount, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.InterestRate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.LabelFor(x => x.InterestRate, @Model.InterestRate.ToString("N"))
                @*@Html.ValidationMessageFor(model => model.InterestRate, "", new { @class = "text-danger" })*@
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.RepaymentAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.RepaymentAmount, new { htmlAttributes = new { @ID = "txtRepaymentAmount" } })
                @Html.ValidationMessageFor(model => model.RepaymentAmount, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.PendingPrincipalAmount, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.LabelFor(x => x.PendingPrincipalAmount, @Model.PendingPrincipalAmount.ToString("N"), new { @ID = "lblPendingPrincipalAmount" })
                @*@Html.ValidationMessageFor(model => model.PendingPrincipalAmount, "", new { @class = "text-danger" })*@
            </div>
        </div>


        <div class="form-group">
            @Html.LabelFor(model => model.PaymentMode, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EnumDropDownListFor(model => model.PaymentMode, htmlAttributes: new { })
                @Html.ValidationMessageFor(model => model.PaymentMode, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.ChequeDetails, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.ChequeDetails, new { htmlAttributes = new { } })
                @Html.ValidationMessageFor(model => model.ChequeDetails, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.Notes, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.TextAreaFor(model => model.Notes, new { htmlAttributes = new { } })
                @Html.ValidationMessageFor(model => model.Notes, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
