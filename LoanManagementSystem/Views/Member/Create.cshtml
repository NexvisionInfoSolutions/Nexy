@model LoanManagementSystem.Models.sdtoUser

@{
    ViewBag.Title = "Create a Member";

}

@*<h2>Create a Member</h2>
*@

<script src="~/Scripts/Address.js"></script>
<script language="javascript" type="text/javascript">
    var ddlUserAddressCountry = "ddlUserAddressCountry";
    var hdnUserAddressCountry = "hdnUserAddressCountry";

    var ddlUserAddressState = "ddlUserAddressState";
    var hdnUserAddressState = "hdnUserAddressState";

    var ddlUserAddressDistrict = "ddlUserAddressDistrict";
    var hdnUserAddressDistrict = "hdnUserAddressDistrict";

    var ddlUserAddressTaluk = "ddlUserAddressTaluk";
    var hdnUserAddressTaluk = "hdnUserAddressTaluk";

    var ddlUserAddressVillage = "ddlUserAddressVillage";
    var hdnUserAddressVillage = "hdnUserAddressVillage";

    var ddlPermanentAddressCountry = "ddlPermanentAddressCountry";
    var hdnPermanentAddressCountry = "hdnPermanentAddressCountry";

    var ddlPermanentAddressState = "ddlPermanentAddressState";
    var hdnPermanentAddressState = "hdnPermanentAddressState";

    var ddlPermanentAddressDistrict = "ddlPermanentAddressDistrict";
    var hdnPermanentAddressDistrict = "hdnPermanentAddressDistrict";

    var ddlPermanentAddressTaluk = "ddlPermanentAddressTaluk";
    var hdnPermanentAddressTaluk = "hdnPermanentAddressTaluk";

    var ddlPermanentAddressVillage = "ddlPermanentAddressVillage";
    var hdnPermanentAddressVillage = "hdnPermanentAddressVillage";

    var ddlGuaranterAddressCountry = "ddlGuaranterAddressCountry";
    var hdnGuaranterAddressCountry = "hdnGuaranterAddressCountry";

    var ddlGuaranterAddressState = "ddlGuaranterAddressState";
    var hdnGuaranterAddressState = "hdnGuaranterAddressState";

    var ddlGuaranterAddressDistrict = "ddlGuaranterAddressDistrict";
    var hdnGuaranterAddressDistrict = "hdnGuaranterAddressDistrict";

    var ddlGuaranterAddressTaluk = "ddlGuaranterAddressTaluk";
    var hdnGuaranterAddressTaluk = "hdnGuaranterAddressTaluk";

    var ddlGuaranterAddressVillage = "ddlGuaranterAddressVillage";
    var hdnGuaranterAddressVillage = "hdnGuaranterAddressVillage";

    $(document).ready(function () {
        LoadComboBox('@Url.Action("CountryInfo", "Settings")'
                     , "CountryId"
                     , "CountryName"
                     , $('#' + hdnUserAddressCountry).val()
                     , ddlUserAddressCountry);

        $("#" + ddlUserAddressCountry).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnUserAddressCountry).val(item.value);
                LoadComboBox('@Url.Action("StateInfo", "Settings", new { CountryId = 0 })' + $('#' + hdnUserAddressCountry).val()
                     , "StateId"
                     , "StateName"
                     , $('#' + hdnUserAddressState).val()
                     , ddlUserAddressState)
            }
        });

        $("#" + ddlUserAddressState).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnUserAddressState).val(item.value);
                LoadComboBox('@Url.Action("DistrictInfo", "Settings", new { StateId = 0 })' + $('#' + hdnUserAddressState).val()
                     , "DistrictId"
                     , "DistrictName"
                     , $('#' + hdnUserAddressDistrict).val()
                     , ddlUserAddressDistrict)
            }
        });

        $("#" + ddlUserAddressDistrict).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnUserAddressDistrict).val(item.value);
                LoadComboBox('@Url.Action("TalukInfo", "Settings", new { DistrictId = 0 })' + $('#' + hdnUserAddressDistrict).val()
                     , "TalukId"
                     , "TalukName"
                     , $('#' + hdnUserAddressTaluk).val()
                     , ddlUserAddressTaluk)
            }
        });

        $("#" + ddlUserAddressTaluk).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnUserAddressTaluk).val(item.value);
                LoadComboBox('@Url.Action("VillageInfo", "Settings", new { TalukId = 0 })' + $('#' + hdnUserAddressTaluk).val()
                     , "VillageId"
                     , "VillageName"
                     , $('#' + hdnUserAddressVillage).val()
                     , ddlUserAddressVillage)
            }
        });

        $("#" + ddlUserAddressVillage).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnUserAddressVillage).val(item.value);
            }
        });

        LoadComboBox('@Url.Action("CountryInfo", "Settings")'
                     , "CountryId"
                     , "CountryName"
                     , $('#' + hdnPermanentAddressCountry).val()
                     , ddlPermanentAddressCountry);

        $("#" + ddlPermanentAddressCountry).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnPermanentAddressCountry).val(item.value);
                LoadComboBox('@Url.Action("StateInfo", "Settings", new { CountryId = 0 })' + $('#' + hdnPermanentAddressCountry).val()
                     , "StateId"
                     , "StateName"
                     , $('#' + hdnPermanentAddressState).val()
                     , ddlPermanentAddressState)
            }
        });

        $("#" + ddlPermanentAddressState).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnPermanentAddressState).val(item.value);
                LoadComboBox('@Url.Action("DistrictInfo", "Settings", new { StateId = 0 })' + $('#' + hdnPermanentAddressState).val()
                     , "DistrictId"
                     , "DistrictName"
                     , $('#' + hdnPermanentAddressDistrict).val()
                     , ddlPermanentAddressDistrict)
            }
        });

        $("#" + ddlPermanentAddressDistrict).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnPermanentAddressDistrict).val(item.value);
                LoadComboBox('@Url.Action("TalukInfo", "Settings", new { DistrictId = 0 })' + $('#' + hdnPermanentAddressDistrict).val()
                     , "TalukId"
                     , "TalukName"
                     , $('#' + hdnPermanentAddressTaluk).val()
                     , ddlPermanentAddressTaluk)
            }
        });

        $("#" + ddlPermanentAddressTaluk).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnPermanentAddressTaluk).val(item.value);
                LoadComboBox('@Url.Action("VillageInfo", "Settings", new { TalukId = 0 })' + $('#' + hdnPermanentAddressTaluk).val()
                     , "VillageId"
                     , "VillageName"
                     , $('#' + hdnPermanentAddressVillage).val()
                     , ddlPermanentAddressVillage)
            }
        });

        $("#" + ddlPermanentAddressVillage).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnPermanentAddressVillage).val(item.value);
            }
        });

        LoadComboBox('@Url.Action("CountryInfo", "Settings")'
                     , "CountryId"
                     , "CountryName"
                     , $('#' + hdnGuaranterAddressCountry).val()
                     , ddlGuaranterAddressCountry);

        $("#" + ddlGuaranterAddressCountry).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnGuaranterAddressCountry).val(item.value);
                LoadComboBox('@Url.Action("StateInfo", "Settings", new { CountryId = 0 })' + $('#' + hdnGuaranterAddressCountry).val()
                     , "StateId"
                     , "StateName"
                     , $('#' + hdnGuaranterAddressState).val()
                     , ddlGuaranterAddressState)
            }
        });

        $("#" + ddlGuaranterAddressState).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnGuaranterAddressState).val(item.value);
                LoadComboBox('@Url.Action("DistrictInfo", "Settings", new { StateId = 0 })' + $('#' + hdnGuaranterAddressState).val()
                     , "DistrictId"
                     , "DistrictName"
                     , $('#' + hdnGuaranterAddressDistrict).val()
                     , ddlGuaranterAddressDistrict)
            }
        });

        $("#" + ddlGuaranterAddressDistrict).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnGuaranterAddressDistrict).val(item.value);
                LoadComboBox('@Url.Action("TalukInfo", "Settings", new { DistrictId = 0 })' + $('#' + hdnGuaranterAddressDistrict).val()
                     , "TalukId"
                     , "TalukName"
                     , $('#' + hdnGuaranterAddressTaluk).val()
                     , ddlGuaranterAddressTaluk)
            }
        });

        $("#" + ddlGuaranterAddressTaluk).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnGuaranterAddressTaluk).val(item.value);
                LoadComboBox('@Url.Action("VillageInfo", "Settings", new { TalukId = 0 })' + $('#' + hdnGuaranterAddressTaluk).val()
                     , "VillageId"
                     , "VillageName"
                     , $('#' + hdnGuaranterAddressVillage).val()
                     , ddlGuaranterAddressVillage)
            }
        });

        $("#" + ddlGuaranterAddressVillage).on('change', function (event) {
            var args = event.args;
            if (args) {
                var item = args.item;
                $("#" + hdnGuaranterAddressVillage).val(item.value);
            }
        });
    });
</script>

@using (Html.BeginForm("Create", "Member", FormMethod.Post, new { enctype = "multipart/form-data" }))
{
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)
    @Html.HiddenFor(model => model.CompanyId)
    <div class="col-md-3">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4>User Details</h4>
            </div>
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(m => m.Code)
                        @Html.TextBoxFor(m => m.Code, new { @class = "form-control", @placeholder = "Enter code" })
                        @Html.ValidationMessageFor(m => m.Code)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.FirstName, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.FirstName, new { @class = "form-control", @placeholder = "Enter 'First Name" })
                        @Html.ValidationMessageFor(model => model.FirstName)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.LastName, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.LastName, new { @class = "form-control", @placeholder = "Enter Last Name" })
                        @Html.ValidationMessageFor(model => model.LastName)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.Label("Profile Image", new { @class = "control-label" })
                        <input name="ProfileImage" type="file" class="form-control" />
                        @*@Html.TextBoxFor(m => m.Logo, new { type = "file" })*@
                        @*@Html.ValidationMessageFor(model => model.CompanyName)*@
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Description, "Remarks", new { @class = "control-label" })
                        @Html.TextAreaFor(model => model.Description, new { @class = "form-control", @placeholder = "Enter Description" })
                        @Html.ValidationMessageFor(model => model.Description)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.NomineeName, "Nominee Name", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.NomineeName, new { @class = "form-control", @placeholder = "Enter Nominee Name" })
                        @Html.ValidationMessageFor(model => model.NomineeName)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.NomineeAddress, "Nominee Address", new { @class = "control-label" })
                        @Html.TextAreaFor(model => model.NomineeAddress, new { @class = "form-control", @placeholder = "Enter Nominee Address" })
                        @Html.ValidationMessageFor(model => model.Description)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.NomineeRelationship, "Nominee Relationship", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.NomineeRelationship, new { @class = "form-control", @placeholder = "Enter Nominee Relationship" })
                        @Html.ValidationMessageFor(model => model.NomineeRelationship)
                    </div>
                </div>

                @*<div class="form-group">
                        @Html.LabelFor(model => model.UserGroupId, "UserGroupId", new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.DropDownList("UserGroupId", String.Empty)
                                @Html.ValidationMessageFor(model => model.UserGroupId)
                            </div>
                    </div>
                *@

                @*<div class="form-group">
                        @Html.LabelFor(model => model.IsActive, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.IsActive)
                                @Html.ValidationMessageFor(model => model.IsActive)
                            </div>
                    </div>
                *@

                @*<div class="form-group">
                        @Html.LabelFor(model => model.Designation, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.Designation)
                                @Html.ValidationMessageFor(model => model.Designation)
                            </div>
                    </div>

                    <div class="form-group">
                        @Html.LabelFor(model => model.UserType, new { @class = "control-label col-md-2" })
                            <div class="col-md-10">
                                @Html.EditorFor(model => model.UserType)
                                @Html.ValidationMessageFor(model => model.UserType)
                            </div>
                    </div>
                *@
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4>Permanent Address</h4>
            </div>
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.Address1, "Address1", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.PermanentAddress.Address1, new { @class = "form-control", @placeholder = "Enter Address Line 1" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.Address1)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.Address2, "Address2", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.PermanentAddress.Address2, new { @class = "form-control", @placeholder = "Enter Address Line 2" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.Address2)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.LandMark, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.PermanentAddress.LandMark, new { @class = "form-control", @placeholder = "Enter Address Line 2" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.LandMark)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.Place, "Place", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.PermanentAddress.Place, new { @class = "form-control", @placeholder = "Enter Place" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.Place)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.Post, "PO", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.PermanentAddress.Post, new { @class = "form-control", @placeholder = "Enter PO" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.Post)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.CountryId, new { @class = "control-label" })
                        <div id='ddlPermanentAddressCountry'></div>
                        @Html.HiddenFor(model => model.PermanentAddress.CountryId, htmlAttributes: new { @class = "form-control", @ID = "hdnPermanentAddressCountry" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.CountryId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.StateId, new { @class = "control-label" })
                        <div id='ddlPermanentAddressState'></div>
                        @Html.HiddenFor(model => model.PermanentAddress.StateId, htmlAttributes: new { @class = "form-control", @ID = "hdnPermanentAddressState" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.StateId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.DistrictId, new { @class = "control-label" })
                        <div id='ddlPermanentAddressDistrict'></div>
                        @Html.HiddenFor(model => model.PermanentAddress.DistrictId, htmlAttributes: new { @class = "form-control", @ID = "hdnPermanentAddressDistrict" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.DistrictId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.TalukId, new { @class = "control-label" })
                        <div id='ddlPermanentAddressTaluk'></div>
                        @Html.HiddenFor(model => model.PermanentAddress.TalukId, htmlAttributes: new { @class = "form-control", @ID = "hdnPermanentAddressTaluk" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.TalukId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentAddress.VillageId, new { @class = "control-label" })
                        <div id='ddlPermanentAddressVillage'></div>
                        @Html.HiddenFor(model => model.PermanentAddress.VillageId, htmlAttributes: new { @class = "form-control", @ID = "hdnPermanentAddressVillage" })
                        @Html.ValidationMessageFor(model => model.PermanentAddress.VillageId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.PermanentContacts.Telephone1, "Phone", new { @class = "control-label col-md-2" })
                        @Html.TextBoxFor(model => model.PermanentContacts.Telephone1, new { @class = "form-control", @placeholder = "Enter Phone" })
                        @Html.ValidationMessageFor(model => model.PermanentContacts.Telephone1)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-3">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4>Communication Address</h4>
            </div>
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.Address1, "Address1", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.UserAddress.Address1, new { @class = "form-control", @placeholder = "Enter Address Line 1" })
                        @Html.ValidationMessageFor(model => model.UserAddress.Address1)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.Address2, "Address2", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.UserAddress.Address2, new { @class = "form-control", @placeholder = "Enter Address Line 2" })
                        @Html.ValidationMessageFor(model => model.UserAddress.Address2)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.LandMark, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.UserAddress.LandMark, new { @class = "form-control", @placeholder = "Enter Address Line 2" })
                        @Html.ValidationMessageFor(model => model.UserAddress.LandMark)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.Place, "Place", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.UserAddress.Place, new { @class = "form-control", @placeholder = "Enter Place" })
                        @Html.ValidationMessageFor(model => model.UserAddress.Place)
                    </div>
                </div>
                <div class="form-group">

                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.Post, "PO", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.UserAddress.Post, new { @class = "form-control", @placeholder = "Enter PO" })
                        @Html.ValidationMessageFor(model => model.UserAddress.Post)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.CountryId, new { @class = "control-label" })
                        <div id='ddlUserAddressCountry'></div>
                        @Html.HiddenFor(model => model.UserAddress.CountryId, htmlAttributes: new { @class = "form-control", @ID = "hdnUserAddressCountry" })
                        @Html.ValidationMessageFor(model => model.UserAddress.CountryId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.StateId, new { @class = "control-label" })
                        <div id='ddlUserAddressState'></div>
                        @Html.HiddenFor(model => model.UserAddress.StateId, htmlAttributes: new { @class = "form-control", @ID = "hdnUserAddressState" })
                        @Html.ValidationMessageFor(model => model.UserAddress.StateId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.DistrictId, new { @class = "control-label" })
                        <div id='ddlUserAddressDistrict'></div>
                        @Html.HiddenFor(model => model.UserAddress.DistrictId, htmlAttributes: new { @class = "form-control", @ID = "hdnUserAddressDistrict" })
                        @Html.ValidationMessageFor(model => model.UserAddress.DistrictId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.TalukId, new { @class = "control-label" })
                        <div id='ddlUserAddressTaluk'></div>
                        @Html.HiddenFor(model => model.UserAddress.TalukId, htmlAttributes: new { @class = "form-control", @ID = "hdnUserAddressTaluk" })
                        @Html.ValidationMessageFor(model => model.UserAddress.TalukId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.UserAddress.VillageId, new { @class = "control-label" })
                        <div id='ddlUserAddressVillage'></div>
                        @Html.HiddenFor(model => model.UserAddress.VillageId, htmlAttributes: new { @class = "form-control", @ID = "hdnUserAddressVillage" })
                        @Html.ValidationMessageFor(model => model.UserAddress.VillageId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.FatherName, "Fathers Name", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.FatherName, new { @class = "form-control", @placeholder = "Enter Father's Name" })
                        @Html.ValidationMessageFor(model => model.FatherName)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Contacts.Telephone1, "Phone", new { @class = "control-label col-md-2" })
                        @Html.TextBoxFor(model => model.Contacts.Telephone1, new { @class = "form-control", @placeholder = "Enter Phone" })
                        @Html.ValidationMessageFor(model => model.Contacts.Telephone1)
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="col-md-3">
        <div class="panel panel-default">
            <div class="panel-heading">
                <h4>Guaranter Details</h4>
            </div>
            <div class="panel-body">
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterName, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.GuaranterName, new { @class = "form-control", @placeholder = "Enter Guaranter Name" })
                        @Html.ValidationMessageFor(model => model.GuaranterName)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.Address1, "Address", new { @class = "control-label col-md-2" })
                        @Html.TextBoxFor(model => model.GuaranterAddress.Address1, new { @class = "form-control", @placeholder = "Enter Address" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.Address1)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.Address2, "Address2", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.GuaranterAddress.Address2, new { @class = "form-control", @placeholder = "Enter Address Line 2" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.Address2)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.LandMark, new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.GuaranterAddress.LandMark, new { @class = "form-control", @placeholder = "Enter Address Line 2" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.LandMark)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.Place, "Place", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.GuaranterAddress.Place, new { @class = "form-control", @placeholder = "Enter Place" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.Place)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.Post, "PO", new { @class = "control-label" })
                        @Html.TextBoxFor(model => model.GuaranterAddress.Post, new { @class = "form-control", @placeholder = "Enter PO" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.Post)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.CountryId, new { @class = "control-label" })
                        <div id='ddlGuaranterAddressCountry'></div>
                        @Html.HiddenFor(model => model.GuaranterAddress.CountryId, htmlAttributes: new { @class = "form-control", @ID = "hdnGuaranterAddressCountry" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.CountryId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.StateId, new { @class = "control-label" })
                        <div id='ddlGuaranterAddressState'></div>
                        @Html.HiddenFor(model => model.GuaranterAddress.StateId, htmlAttributes: new { @class = "form-control", @ID = "hdnGuaranterAddressState" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.StateId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.DistrictId, new { @class = "control-label" })
                        <div id='ddlGuaranterAddressDistrict'></div>
                        @Html.HiddenFor(model => model.GuaranterAddress.DistrictId, htmlAttributes: new { @class = "form-control", @ID = "hdnGuaranterAddressDistrict" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.DistrictId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.TalukId, new { @class = "control-label" })
                        <div id='ddlGuaranterAddressTaluk'></div>
                        @Html.HiddenFor(model => model.GuaranterAddress.TalukId, htmlAttributes: new { @class = "form-control", @ID = "hdnGuaranterAddressTaluk" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.TalukId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterAddress.VillageId, new { @class = "control-label" })
                        <div id='ddlGuaranterAddressVillage'></div>
                        @Html.HiddenFor(model => model.GuaranterAddress.VillageId, htmlAttributes: new { @class = "form-control", @ID = "hdnGuaranterAddressVillage" })
                        @Html.ValidationMessageFor(model => model.GuaranterAddress.VillageId)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.GuaranterContacts.Telephone1, "Phone", new { @class = "control-label col-md-2" })
                        @Html.TextBoxFor(model => model.GuaranterContacts.Telephone1, new { @class = "form-control", @placeholder = "Enter Phone" })
                        @Html.ValidationMessageFor(model => model.GuaranterContacts.Telephone1)
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-md-10">
                        @Html.LabelFor(model => model.Occupation, "Occupation", new { @class = "control-label col-md-2" })
                        @Html.TextBoxFor(model => model.Occupation, new { @class = "form-control", @placeholder = "Enter Occupation" })
                        @Html.ValidationMessageFor(model => model.Occupation)
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-5">
        <div class="form-group">
            <div class="col-md-offset-2 col-md-10">
                <input type="submit" value="Create" class="btn btn-default" />
            </div>
        </div>
    </div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>
